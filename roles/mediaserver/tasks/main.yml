---
- name: Set default values
  ansible.builtin.set_fact:
    containers: "{{ containers | default({}) | combine({
      item.key: item.value
      | combine({
        'image': default.oci_registry + '/' + item.key,
        'version': item.value.version | default(default.version),
        'container_volumes': item.value.volumes | default([]),
        'container_env': item.value.env | default({}),
      })
    }) }}"
  with_dict: "{{ containers }}"
  no_log: true

- name: Set computed values
  ansible.builtin.set_fact:
    containers: "{{ containers | combine({
      item.key: item.value
      | combine({
        'container_image': item.value.image + ':' + item.value.version,
        'container_port': '127.0.0.1:' + item.value.port | string + ':' + item.value.port | string,
      })
    }) }}"
  with_dict: "{{ containers }}"
  no_log: true

- name: Set nonroot user ID facts
  ansible.builtin.set_fact:
    nonroot_uid: "{{ ansible_facts.user_uid }}"
    nonroot_gid: "{{ ansible_facts.user_gid }}"

- name: Install packages
  become: true
  ansible.builtin.apt:
    name:
      - python3-lxml  # Necessary for the community.general.xml module
      - unzip  # Necessary for the ansible.builtin.unarchive module
      - acl  # Necessary to become an unprivileged user
    state: present

- name: Install and configure docker
  ansible.builtin.include_tasks: docker.yml

- name: Install and configure the datadog agent
  ansible.builtin.include_tasks: datadog.yml

- name: Install and configure nginx
  ansible.builtin.include_tasks: nginx.yml

- name: Create a network
  become: true
  community.docker.docker_network:
    name: mediaserver
    driver: bridge
    state: present
  register: network

- name: Create data directories
  become: true
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: 0755
    owner: "{{ nonroot_uid }}"
    group: "{{ nonroot_gid }}"
  with_items:
    - /data
    - /data/media
    - /data/media/downloads
    - /data/media/libraries
    - /data/media/libraries/movies
    - /data/media/libraries/shows
    - /data/state/qbittorrent
    - /data/state/jellyfin
    - /data/state/jellyfin/config

- name: Configure qbittorrent
  ansible.builtin.include_tasks: qbittorrent.yml

- name: Configure jellyfin
  ansible.builtin.include_tasks: jellyfin.yml

- name: Configure arr services
  ansible.builtin.include_tasks: arr.yml
  with_dict: "{{ containers }}"
  loop_control:
    label: "{{ item.key }}"
  when: item.key.endswith("arr")

- name: Create and configure containers
  ansible.builtin.include_role:
    name: mhutter.docker-systemd-service
    apply:
      become: true
  vars:
    service_name: "{{ item.key }}"
    container_name: "{{ item.key }}"
    container_image: "{{ item.value.container_image }}"
    container_labels:
      - com.datadoghq.tags.env={{ default.env }}
      - com.datadoghq.tags.service={{ item.key }}
      - com.datadoghq.tags.version={{ item.value.version }}
    container_docker_pull: true
    container_ports:
      - "{{ item.value.container_port }}"
    container_network: "mediaserver"
    container_env: "{{ item.value.container_env }}"
    container_volumes: "{{ item.value.container_volumes }}"
  with_dict: "{{ containers }}"
  loop_control:
    label: "{{ item.key }}"
