---
- name: Set default values
  ansible.builtin.set_fact:
    containers: "{{ containers | default({}) | combine({
      item.key: item.value
      | combine({
        'version': item.value.version | default(default.version),
        'container_volumes': item.value.volumes | default([]),
      })
    }) }}"
  with_dict: "{{ containers }}"
  no_log: true

- name: Set computed values
  ansible.builtin.set_fact:
    containers: "{{ containers | combine({
      item.key: item.value
      | combine({
        'container_image': item.value.image + ':' + item.value.version,
        'container_port': '127.0.0.1:' + item.value.port | string + ':' + item.value.port | string,
        'container_env': item.value.env | default({}) | combine({
          item.key | upper + '__API_KEY': secrets.api_keys[item.key],
          item.key | upper + '__LOG_LEVEL': 'debug',
          item.key | upper + '__URL_BASE': item.key,
          item.key | upper + '__ANALYTICS_ENABLED': 'False',
        } if 'arr' in item.key else {}),
      })
    }) }}"
  with_dict: "{{ containers }}"
  no_log: true

- name: Set nonroot user ID facts
  ansible.builtin.set_fact:
    nonroot_uid: "{{ ansible_facts.user_uid }}"
    nonroot_gid: "{{ ansible_facts.user_gid }}"

- name: Add docker key
  become: true
  ansible.builtin.apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    keyring: /usr/share/keyrings/docker-archive-keyring.gpg
    state: present

- name: Add docker repository
  become: true
  ansible.builtin.apt_repository:
    repo: deb [arch=arm64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable
    state: present

- name: Install packages
  become: true
  ansible.builtin.apt:
    name:
      - docker-ce
      - docker-compose
      - python3-lxml  # Necessary for the community.general.xml module
      - unzip  # Necessary for the ansible.builtin.unarchive module
      - acl  # Necessary to become an unprivileged user
    state: present

- name: Configure docker
  become: true
  ansible.builtin.copy:
    src: daemon.json
    dest: /etc/docker/
    mode: 0600
  notify:
    - Restart docker

- name: Install and configure the datadog agent
  ansible.builtin.include_tasks: datadog.yml

- name: Install and configure nginx
  ansible.builtin.include_tasks: nginx.yml

- name: Create a network
  become: true
  community.docker.docker_network:
    name: mediaserver
    driver: bridge
    state: present

- name: Create data and cache directories
  become: true
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: 0755
    owner: "{{ nonroot_uid }}"
    group: "{{ nonroot_gid }}"
  with_items:
    - /data
    - /data/downloads
    - /data/media
    - /data/media/movies
    - /data/media/tv
    - /cache
    - /cache/sonarr
    - /cache/radarr
    - /etc/jellyfin
    - /etc/jellyfin/config

- name: Configure jellyfin
  ansible.builtin.include_tasks: jellyfin.yml

- name: Create and configure containers
  ansible.builtin.include_role:
    name: mhutter.docker-systemd-service
    apply:
      become: true
  vars:
    service_name: "{{ item.key }}"
    container_name: "{{ item.key }}"
    container_image: "{{ item.value.container_image }}"
    container_labels:
      - com.datadoghq.tags.env=prod
      - com.datadoghq.tags.service={{ item.key }}
      - com.datadoghq.tags.version={{ item.value.version }}
    container_docker_pull: true
    container_ports:
      - "{{ item.value.container_port }}"
    container_network: "mediaserver"
    container_env: "{{ item.value.container_env }}"
    container_volumes: "{{ item.value.container_volumes }}"
  with_dict: "{{ containers }}"
  loop_control:
    label: "{{ item.key }}"
