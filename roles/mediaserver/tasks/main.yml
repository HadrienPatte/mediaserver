---
- name: Set default values
  set_fact:
    containers: "{{ containers |
      default({}) |
      combine({
        item.key : item.value |
        combine({
          'version' : item.value.version | default(default.version),
          'proxy' : item.value.proxy | default(default.proxy),
          'arr_config' : item.value.arr_config | default(default.arr_config),
          'expose_port' : item.value.expose_port | default(default.expose_port),
          'container_volumes' : item.value.volumes | default([]) + default.volumes,
        })
      })
    }}"
  with_dict: "{{ containers }}"
  no_log: true

- name: Set computed values
  set_fact:
    containers: "{{ containers |
      combine({
        item.key : item.value |
        combine({
          'container_image' : item.value.image + ':' + item.value.version,
          'container_port' : ('' if item.value.expose_port else '127.0.0.1:') + item.value.port | string + ':' + item.value.port | string,
        })
      })
    }}"
  with_dict: "{{ containers }}"
  no_log: true

- name: Add docker key
  become: true
  apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    keyring: /usr/share/keyrings/docker-archive-keyring.gpg
    state: present

- name: Add docker repository
  become: true
  apt_repository:
    repo: deb [arch=arm64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable
    state: present

- name: Install packages
  become: true
  apt:
    name:
      - docker-ce
      - docker-compose
      - python3-lxml
    state: present

- name: Configure docker
  become: true
  copy:
    src: daemon.json
    dest: /etc/docker/
  notify:
    - Restart docker

- name: Install the datadog agent
  include_role:
    name: datadog.datadog
  vars:
    ansible_become: true
    datadog_api_key: "{{ secrets.api_keys['datadog'] }}"
    datadog_additional_groups:
      - adm
      - docker
      - systemd-journal
      - dialout
    datadog_config:
      logs_enabled: true
      listeners:
        - name: docker
      config_providers:
        - name: docker
          polling: true
      logs_config:
        container_collect_all: true
      process_config:
        enabled: true
      apm_config:
        enabled: false
    datadog_checks:
      auth:
        logs:
          - type: file
            path: /var/log/auth.log
            service: auth
            source: auth
      cloud-init:
        logs:
          - type: file
            path: /var/log/cloud-init.log
            service: cloud-init
            source: cloud-init
            start_position: beginning
            log_processing_rules:
              - type: multi_line
                name: new_log_start_with_date
                pattern: \d{4}-\d{2}-\d{2}\s\d{2}:\d{2}:\d{2}\,\d{3}
      container:
      disk:
        instances:
          - use_mount: true
            all_partitions: true
            excluded_filesystems:
              - overlay
              - nsfs
      custom_atmospheric:
        init_config:
        instances: [{}]
      docker:
        init_config:
        instances: [{}]
      journald:
        logs:
          - type: journald
            container_mode: true
            exclude_units:
              - nginx.service
              - homer.service
              - radarr.service
              - radarr-exportarr.service
              - sonarr.service
              - sonarr-exportarr.service
              - prowlarr.service
              - prowlarr-exportarr.service
              - qbittorrent.service
              - jellyfin.service
      lighttpd:
        init_config:
        instances:
          - lighttpd_status_url: http://localhost:{{ containers.homer.port }}/lighttpd-status?auto
      nginx:
        init_config:
        instances:
          - nginx_status_url: http://localhost:{{ containers.nginx.port }}/nginx-status/
      openmetrics:
        init_config:
        instances:
          - openmetrics_endpoint: http://localhost:{{ containers.sonarr.exportarr.port }}/metrics
            namespace: sonarr
            raw_metric_prefix: sonarr_
            metrics:
              - .+
          - openmetrics_endpoint: http://localhost:{{ containers.radarr.exportarr.port }}/metrics
            namespace: radarr
            raw_metric_prefix: radarr_
            metrics:
              - .+
          - openmetrics_endpoint: http://localhost:{{ containers.prowlarr.exportarr.port }}/metrics
            namespace: prowlarr
            raw_metric_prefix: prowlarr_
            metrics:
              - .+
          - openmetrics_endpoint: http://localhost:{{ containers.jellyfin.port }}/metrics
            namespace: jellyfin
            collect_histogram_buckets: true
            non_cumulative_histogram_buckets: true
            histogram_buckets_as_distributions: true
            collect_counters_with_distributions: true
            metrics:
              - .+
      systemd:
        init_config:
        instances:
          - unit_names:
              - cron.service
              - datadog-agent.service
              - docker.service
              - docker.socket
              - ssh.service
              - unattended-upgrades.service

- name: Install I2C/BME280 dependencies in datadog embedded python
  become: true
  pip:
    name:
      - smbus2
      - RPi.bme280
    state: present
    executable: /opt/datadog-agent/embedded/bin/pip
  notify: restart datadog-agent

- name: Create custom atmospheric check
  become: true
  copy:
    src: custom_atmospheric.py
    dest: /etc/datadog-agent/checks.d/
    owner: dd-agent
    group: dd-agent
  notify: restart datadog-agent

- name: Create a network
  become: true
  docker_network:
    name: mediaserver
    driver: bridge
    state: present
  register: network_result

- name: Create config directories
  become: true
  file:
    path: /etc/{{ item.key }}
    state: directory
    owner: "{{ ansible_facts.user_uid }}"
    group: "{{ ansible_facts.user_gid }}"
  with_dict: "{{ containers }}"
  loop_control:
    label: "{{ item.key }}"

- name: Create homer config file
  template:
    src: homer.yml.j2
    dest: /etc/homer/config.yml
  notify: Restart homer

- name: Create homer lighttpd config file
  copy:
    src: lighttpd.conf
    dest: /etc/homer/
  notify: Restart homer

- name: Create nginx config file
  template:
    src: nginx.conf.j2
    dest: /etc/nginx/nginx.conf
  notify: Restart nginx

- name: Create config files
  include_tasks: xml_config.yml
  with_dict: "{{ containers }}"
  loop_control:
    label: "{{ item.key }}"
  when: item.value.arr_config

- name: Check if jellyfin config file exists
  stat:
    path: /etc/jellyfin/system.xml
  register: jellyfin_config_file

- name: Create jellyfin config file
  copy:
    dest: /etc/jellyfin/system.xml
    content: "<ServerConfiguration/>"
  when: not jellyfin_config_file.stat.exists
  notify: Restart jellyfin

- name: Configure jellyfin
  xml:
    path: /etc/jellyfin/system.xml
    xpath: /ServerConfiguration/{{ item.key }}
    value: "{{ item.value }}"
  loop:
    - key: PublicPort
      value: "{{ containers['jellyfin'].port }}"
    - key: HttpServerPortNumber
      value: "{{ containers['jellyfin'].port }}"
    - key: EnableMetrics
      value: "true"
  notify: Restart jellyfin

- name: Create and configure containers
  include_role:
    name: mhutter.docker-systemd-service
  vars:
    ansible_become: true
    service_name: "{{ item.key }}"
    container_name: "{{ item.key }}"
    container_image: "{{ item.value.container_image }}"
    container_labels:
      - com.datadoghq.tags.env=prod
      - com.datadoghq.tags.service={{ item.key }}
      - com.datadoghq.tags.version={{ item.value.version }}
    container_docker_pull: true
    container_ports:
      - "{{ item.value.container_port }}"
    container_network: "mediaserver"
    container_env:
      PUID: "{{ ansible_facts.user_uid }}"
      PGID: "{{ ansible_facts.user_gid }}"
      TZ: "Europe/Paris"
      WEBUI_PORTS: "{{ containers.qbittorrent.port }}"
    container_volumes: "{{ item.value.container_volumes }}"
  with_dict: "{{ containers }}"
  loop_control:
    label: "{{ item.key }}"

- name: Create and configure exportarr containers
  include_role:
    name: mhutter.docker-systemd-service
  vars:
    ansible_become: true
    service_name: "{{ item.key }}-exportarr"
    container_name: "{{ item.key }}-exportarr"
    container_image: "{{ exportarr.image }}:{{ exportarr.version }}"
    container_labels:
      - com.datadoghq.tags.env=prod
      - com.datadoghq.tags.service={{ item.key }}-exportarr
      - com.datadoghq.tags.version={{ exportarr.version }}
    container_docker_pull: true
    container_cmd:
      - "{{ item.key }}"
    container_ports:
      - "127.0.0.1:{{ item.value.exportarr.port }}:{{ item.value.exportarr.port }}"
    container_network: "mediaserver"
    container_env:
      PORT: "{{ item.value.exportarr.port }}"
      URL: "http://{{ item.key }}:{{ item.value.port }}/{{ item.key }}"
      APIKEY: "{{ secrets.api_keys[item.key] }}"
      PUID: "{{ ansible_facts.user_uid }}"
      PGID: "{{ ansible_facts.user_gid }}"
      TZ: "Europe/Paris"
    container_volumes:
      - /etc/localtime:/etc/localtime:ro
  with_dict: "{{ containers }}"
  loop_control:
    label: "{{ item.key }}"
  when: "item.value.exportarr | default(false)"
