---
- name: Set default values
  ansible.builtin.set_fact:
    containers: "{{ containers | default({}) | combine({
      item.key: item.value
      | combine({
        'version': item.value.version | default(default.version),
        'proxy': item.value.proxy | default(default.proxy),
        'arr_config': item.value.arr_config | default(default.arr_config),
        'expose_port': item.value.expose_port | default(default.expose_port),
        'container_volumes': item.value.volumes | default([]) + default.volumes,
      })
    }) }}"
  with_dict: "{{ containers }}"
  no_log: true

- name: Set computed values
  ansible.builtin.set_fact:
    containers: "{{ containers | combine({
      item.key: item.value
      | combine({
        'container_image': item.value.image + ':' + item.value.version,
        'container_port': ('' if item.value.expose_port else '127.0.0.1:') + item.value.port | string + ':' + item.value.port | string,
      })
    }) }}"
  with_dict: "{{ containers }}"
  no_log: true

- name: Add docker key
  become: true
  ansible.builtin.apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    keyring: /usr/share/keyrings/docker-archive-keyring.gpg
    state: present

- name: Add docker repository
  become: true
  ansible.builtin.apt_repository:
    repo: deb [arch=arm64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable
    state: present

- name: Install packages
  become: true
  ansible.builtin.apt:
    name:
      - docker-ce
      - docker-compose
      - python3-lxml
    state: present

- name: Configure docker
  become: true
  ansible.builtin.copy:
    src: daemon.json
    dest: /etc/docker/
    mode: 0600
  notify:
    - Restart docker

- name: Install and configure the datadog agent
  ansible.builtin.include_tasks: datadog.yml

- name: Create a network
  become: true
  community.docker.docker_network:
    name: mediaserver
    driver: bridge
    state: present
  register: network_result

- name: Create config directories
  become: true
  ansible.builtin.file:
    path: /etc/{{ item.key }}
    state: directory
    mode: 0755
    owner: "{{ ansible_facts.user_uid }}"
    group: "{{ ansible_facts.user_gid }}"
  with_dict: "{{ containers }}"
  loop_control:
    label: "{{ item.key }}"

- name: Create homer config file
  ansible.builtin.template:
    src: homer.yml.j2
    dest: /etc/homer/config.yml
    mode: 0600
  notify: Restart homer

- name: Create homer lighttpd config file
  ansible.builtin.copy:
    src: lighttpd.conf
    dest: /etc/homer/
    mode: 0600
  notify: Restart homer

- name: Create nginx config file
  ansible.builtin.template:
    src: nginx.conf.j2
    dest: /etc/nginx/nginx.conf
    mode: 0600
  notify: Restart nginx

- name: Create config files
  ansible.builtin.include_tasks: xml_config.yml
  with_dict: "{{ containers }}"
  loop_control:
    label: "{{ item.key }}"
  when: item.value.arr_config

- name: Check if jellyfin config file exists
  ansible.builtin.stat:
    path: /etc/jellyfin/system.xml
  register: jellyfin_config_file

- name: Create jellyfin config file
  ansible.builtin.copy:
    dest: /etc/jellyfin/system.xml
    content: "<ServerConfiguration/>"
    mode: 0600
  when: not jellyfin_config_file.stat.exists
  notify: Restart jellyfin

- name: Configure jellyfin
  community.general.xml:
    path: /etc/jellyfin/system.xml
    xpath: /ServerConfiguration/{{ item.key }}
    value: "{{ item.value }}"
  loop:
    - key: PublicPort
      value: "{{ containers['jellyfin'].port }}"
    - key: HttpServerPortNumber
      value: "{{ containers['jellyfin'].port }}"
    - key: EnableMetrics
      value: "true"
  notify: Restart jellyfin

- name: Create and configure containers
  ansible.builtin.include_role:
    name: mhutter.docker-systemd-service
  vars:
    ansible_become: true
    service_name: "{{ item.key }}"
    container_name: "{{ item.key }}"
    container_image: "{{ item.value.container_image }}"
    container_labels:
      - com.datadoghq.tags.env=prod
      - com.datadoghq.tags.service={{ item.key }}
      - com.datadoghq.tags.version={{ item.value.version }}
    container_docker_pull: true
    container_ports:
      - "{{ item.value.container_port }}"
    container_network: "mediaserver"
    container_env:
      PUID: "{{ ansible_facts.user_uid }}"
      PGID: "{{ ansible_facts.user_gid }}"
      TZ: "Europe/Paris"
      WEBUI_PORTS: "{{ containers.qbittorrent.port }}"
    container_volumes: "{{ item.value.container_volumes }}"
  with_dict: "{{ containers }}"
  loop_control:
    label: "{{ item.key }}"

- name: Create and configure exportarr containers
  ansible.builtin.include_role:
    name: mhutter.docker-systemd-service
  vars:
    ansible_become: true
    service_name: "{{ item.key }}-exportarr"
    container_name: "{{ item.key }}-exportarr"
    container_image: "{{ exportarr.image }}:{{ exportarr.version }}"
    container_labels:
      - com.datadoghq.tags.env=prod
      - com.datadoghq.tags.service={{ item.key }}-exportarr
      - com.datadoghq.tags.version={{ exportarr.version }}
    container_docker_pull: true
    container_cmd:
      - "{{ item.key }}"
    container_ports:
      - "127.0.0.1:{{ item.value.exportarr.port }}:{{ item.value.exportarr.port }}"
    container_network: "mediaserver"
    container_env:
      PORT: "{{ item.value.exportarr.port }}"
      URL: "http://{{ item.key }}:{{ item.value.port }}/{{ item.key }}"
      APIKEY: "{{ secrets.api_keys[item.key] }}"
      PUID: "{{ ansible_facts.user_uid }}"
      PGID: "{{ ansible_facts.user_gid }}"
      TZ: "Europe/Paris"
    container_volumes:
      - /etc/localtime:/etc/localtime:ro
  with_dict: "{{ containers }}"
  loop_control:
    label: "{{ item.key }}"
  when: "item.value.exportarr | default(false)"
